#!/bin/sh

# source me in your script or .bashrc/.zshrc if wanna use cecho
# source '/path/to/cecho.sh'

cecho()
{
	#FOREGROUND
	FG_BLACK="\e[30m"
	FG_RED="\e[31m"
	FG_GREEN="\e[32m"
	FG_YELLOW="\e[33m"
	FG_BLUE="\e[34m"
	FG_PURPLE="\e[35m"
	FG_CYAN="\e[36m"
	FG_WHITE="\e[37m"

	#BACKGROUND
	BG_BLACK="\e[40m"
	BG_RED="\e[41m"
	BG_GREEN="\e[42m"
	BG_YELLOW="\e[43m"
	BG_BLUE="\e[44m"
	BG_PURPLE="\e[45m"
	BG_CYAN="\e[46m"
	BG_WHITE="\e[47m"

	#ACTION
	DONE="\e[0m"
	HIGHLIGHT="\e[1m"
	UNDERLINE="\e[4m"
	BLINK="\e[5m"
	REVERSE="\e[7m"
	INVISIBLE="\e[8m"

	msg=$DONE
	help_info='cecho \
	-r -hl -re -t -t -t -t "the page is generated by" -B -bl "cecho" -d -r -hl -re -t -t -t -t -d -n \
	-hl Usage: -d -n \
	-t "a light and simple wrapper of echo, with colour flags." -d -n -n\
	-hl Syntax: -d -n \
	-t -g -hl cecho -d -B -y -color1 -B -b message1 -w -B "[ -color2 message2 ... ]" -r -B "[ -done ]" -d -n \
	-t -g -hl cecho -d -B -y -fg_color -B -p -bg_color -B -c -action -B -b message -B -w "[...]" -B -r "[ -done ]" -d -n -n \
	-hl "ForeGround color flag:" -d -n \
	-t -r "-r | -red" -t -g "-g | -green" -t -y "-y | -yellow" -t -bk -bw "-bk | -black" -d "(here with white bg)" -d -n \
	-t -b "-b | -blue" -t -p "-p | -purple" -t -c "-c | -cyan" -t -w "-w | -gr | -white | -gray" -d -n -n\
	-hl "BackGround color flag:" -d -n \
	-t -br "-br | -b_red" -t -bg "-bg | -b_green" -t -by "-by | -b_yellow" -t -bbk "-bbk | -b_black" -d -n \
	-t -bb "-bb | -b_blue" -t -bp "-bp | -b_purple" -t -bc "-bc | -b_cyan" -t -bw "-bw | -bgr | -b_white | -b_gray" -d -n -n \
	-hl "Action flag:" -d -n \
	-t "-d  | -done" -t -hl "-hl | -highlight" -d -t -ul "-ul | -underline" -d -t -re "-re | -reverse" -d -n \
	-t -bl "-bl | -blink" -d -t "[ there is invisible here ]" -t "-->" -iv "-iv | -invisible" -d "<--" -n -n \
	-hl "Escaped character:" -d -n \
	-t "-B | -blank" -t "-t | -tab" -t "-n | -newline" -d -n \
	-g -hl -re -t -t -t -t "the src of above (as an example)" -t -t -t -d'

	while (($#!=0))
	do
	case $1 in

		# escape character

		-B | -blank		)	msg=$msg" ";		;;
		-t | -tab		)	msg=$msg"\t";		;;
		-n | -newline	)	msg=$msg"\n";		;;

		# foreground color

		-bk| -black		)	msg=$msg$FG_BLACK;	;;
		-r | -red		)	msg=$msg$FG_RED;	;;
		-g | -green		)	msg=$msg$FG_GREEN;	;;
		-y | -yellow	)	msg=$msg$FG_YELLOW;	;;
		-b | -blue		)	msg=$msg$FG_BLUE;	;;
		-p | -purple	)	msg=$msg$FG_PURPLE;	;;
		-c | -cyan		)	msg=$msg$FG_CYAN;	;;
		-w | -white		)	msg=$msg$FG_WHITE;	;;
		-gr| -gray		)	msg=$msg$FG_WHITE;	;;

		# background color

		-bbk| -b_black	)	msg=$msg$BG_BLACK;	;;
		-br | -b_red	)	msg=$msg$BG_RED;	;;
		-bg | -b_green	)	msg=$msg$BG_GREEN;	;;
		-by | -b_yellow	)	msg=$msg$BG_YELLOW;	;;
		-bb | -b_blue	)	msg=$msg$BG_BLUE;	;;
		-bp | -b_purple	)	msg=$msg$BG_PURPLE;	;;
		-bc | -b_cyan	)	msg=$msg$BG_CYAN;	;;
		-bw | -b_white	)	msg=$msg$BG_WHITE;	;;
		-bgr| -b_gray	)	msg=$msg$BG_WHITE;	;;

		# action, some can be overlaid

		-d | -done		)	msg=$msg$DONE;		;;
		-hl| -highlight	)	msg=$msg$HIGHLIGHT;	;;
		-ul| -underline	)	msg=$msg$UNDERLINE;	;;
		-bl| -blink		)	msg=$msg$BLINK;		;;
		-re| -reverse	)	msg=$msg$REVERSE;	;;
		-iv| -invisible )	msg=$msg$INVISIBLE;	;;

		# functional

		-h|-help|--help	)
			eval $help_info
			cecho $help_info
			return
		;;

		# string

		*)
			msg=$msg$1
		;;
	esac
	shift
	done

	# clear

	msg+=$DONE"\n"	

	# print

	echo -ne $msg
}

